import { html } from '@polymer/polymer/lib/utils/html-tag.js';
import { PolymerElement } from '@polymer/polymer/polymer-element.js';
class GridFilteringDemos extends DemoReadyEventEmitter(GridDemo(PolymerElement)) {
  static get template() {
    return html`
    <style include="vaadin-component-demo-shared-styles">
      :host {
        display: block;
      }
    </style>

    <style>
      vaadin-checkbox {
        margin-bottom: 10px;
      }
    </style>


    <h3>Filtering</h3>
    <p>
      <code>&lt;vaadin-grid-filter&gt;</code> can be used to define filtering for a column.
    </p>
    <p>
      <b>NOTE: You must explicitly import the <code>vaadin-grid-filter.html</code> in order to use <code>&lt;vaadin-grid-filter&gt;</code>.</b>
    </p>

    <vaadin-demo-snippet id="grid-filtering-demos-filtering">
      <template preserve-content="">
        <dom-bind>
          <template>

            <x-array-data-provider items="{{items}}"></x-array-data-provider>

            <vaadin-grid aria-label="Filtering Example" items="[[items]]">

              <vaadin-grid-column width="60px" flex-grow="0">
                <template class="header">#</template>
                <template>[[index]]</template>
              </vaadin-grid-column>

              <vaadin-grid-column>
                <template class="header">
                  <vaadin-grid-filter aria-label="First Name" path="name.first" value="[[_filterFirstName]]">
                    <vaadin-text-field slot="filter" placeholder="First Name" value="{{_filterFirstName}}" focus-target=""></vaadin-text-field>
                  </vaadin-grid-filter>
                </template>
                <template>[[item.name.first]]</template>
              </vaadin-grid-column>

              <vaadin-grid-column>
                <template class="header">
                  <vaadin-grid-filter aria-label="Last Name" path="name.last" value="[[_filterLastName]]">
                    <vaadin-text-field slot="filter" placeholder="Last Name" value="{{_filterLastName}}" focus-target=""></vaadin-text-field>
                  </vaadin-grid-filter>
                </template>
                <template>[[item.name.last]]</template>
              </vaadin-grid-column>

            </vaadin-grid>
          </template>
        </dom-bind>
      </template>
    </vaadin-demo-snippet>


    <h3>Filtering with Data Provider</h3>
    <p>
      While filtering works with array data providers out-of-the-box, custom data
      providers need to provide pre-filtered data to the vaadin-grid.
    </p>
    <p>
      Whenever the value of a vaadin-grid-filter changes, for example, when
      a user types something, the dataProvider is asked for fresh data with
      the <code>filters</code> included as one of the request parameters.
    </p>
    <p>
      <b>Hint: </b>When using a data provider, <code>path</code> on the filter element
      can be customized to be any string, instead of a property on the item object.
    </p>

    <vaadin-demo-snippet id="grid-filtering-demos-filtering-with-data-provider">
      <template preserve-content="">
        <x-remote-filtering-example></x-remote-filtering-example>
        <dom-module id="x-remote-filtering-example">
          <template preserve-content="">
            <vaadin-grid aria-label="Filtering with Data Provider Example" id="grid">

              <vaadin-grid-column width="60px" flex-grow="0">
                <template class="header">#</template>
                <template>[[index]]</template>
              </vaadin-grid-column>

              <vaadin-grid-column>
                <template class="header">
                  <vaadin-grid-filter aria-label="Fist Name" path="firstName" value="[[_filterFirstName]]">
                    <vaadin-text-field slot="filter" placeholder="First Name" value="{{_filterFirstName}}" focus-target=""></vaadin-text-field>
                  </vaadin-grid-filter>
                </template>
                <template>[[item.firstName]]</template>
              </vaadin-grid-column>

              <vaadin-grid-column>
                <template class="header">
                  <vaadin-grid-filter aria-label="Last Name" path="lastName" value="[[_filterLastName]]">
                    <vaadin-text-field slot="filter" placeholder="Last Name" value="{{_filterLastName}}" focus-target=""></vaadin-text-field>
                  </vaadin-grid-filter>
                </template>
                <template>[[item.lastName]]</template>
              </vaadin-grid-column>

            </vaadin-grid>
          </template>
          <script>
            window.addDemoReadyListener('#grid-filtering-demos-filtering-with-data-provider', function(document) {
              Polymer({
                is: 'x-remote-filtering-example',

                ready: function() {
                  var grid = this.\$.grid;

                  grid.size = 200;

                  grid.dataProvider = function(params, callback) {
                    var xhr = new XMLHttpRequest();
                    xhr.onload = function() {
                      var response = JSON.parse(xhr.responseText);

                      // Number of items changes after filtering. We need
                      // to update the grid size based on server response.
                      grid.size = response.size;

                      callback(response.result);
                    };

                    var index = params.page * params.pageSize;
                    var url = 'https://demo.vaadin.com/demo-data/1.0/people?index=' + index + '&count=' + params.pageSize;

                    // \`params.filters\` format: [{path: 'lastName', direction: 'asc'}, ...];
                    params.filters.forEach(function(filter) {
                      url += '&filters[' + filter.path + ']=' + encodeURIComponent(filter.value);
                    });

                    xhr.open('GET', url, true);
                    xhr.send();
                  };
                }
              });
            });
          &lt;/script>
        </dom-module>
      </template>
    </vaadin-demo-snippet>
`;
  }

  static get is() {
    return 'grid-filtering-demos';
  }
}
customElements.define(GridFilteringDemos.is, GridFilteringDemos);
