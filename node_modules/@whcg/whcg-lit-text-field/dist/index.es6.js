
import '@vaadin/vaadin-text-field';
import '@whcg/whcg-lit-text-field/theme/whcg-lit-text-field-styles.js';
import '@whcg/whcg-general-styles/stylesandshapes.js';
import { html, PolymerElement } from '@polymer/polymer/polymer-element.js';


/*
 * `WhcgTextField`
 * 
 * @customElement
 * @polymer
 
 */
class WhcgLitTextField extends PolymerElement {
    static get template() {
        return html `
        
        <style> 
            vaadin-text-field {
                --whcg-input-field-background-color: var(--whcg-text-field-input-field-background-color);
                --whcg-input-field-background-color__dark: var(--whcg-text-field-input-field-background-color__dark);
                --whcg-input-field-text-color: var(--whcg-text-field-input-field-text-color);
                --whcg-label-color: var(--whcg-text-field-label-color);

                --whcg-label-color__dark: var(--whcg-text-field-label-color__dark);
                --whcg-input-field-text-color__dark: var(--whcg-text-field-input-field-text-color__dark);

                --whcg-input-field-box-shadow: var(--whcg-text-field-input-field-box-shadow);
                --whcg-input-field-border-radius: var(--whcg-text-field-input-field-border-radius);
            }
           
        </style>
        
        <vaadin-text-field class$="[[themeclass]]" label="test" value="{{value}}"></vaadin-text-field>
        `;
    }

    static get properties() {

        return {

            label: {
                type: String,
                notify: true,
                readOnly: false,
            },
            value: {
                type: String,
                notify: true,
                readOnly: false,
                observer: '_valueChanged'
            },
            placeholder: {
                type: String,
                notify: true,
                readOnly: false,
            },
            suffix: {
                type: String,
                notify: true,
                readOnly: false,
            },
            kind: {
                type: String,
                notify: true,
                readOnly: false,
            },
            themeclass: {
                type: String,
                notify: true,
                readOnly: false,
            },
            period: {
                type: String,
                notify: true,
                readOnly: false,
            },
            valueoutput: {
                type: String,
                notify: true,
                readOnly: false,
            }
        }
    }

    _valueChanged() {
        console.log('new value');
        console.log(this.value);
        this.valueoutput = this.value;
    }

    connectedCallback() {
        super.connectedCallback();
        let event = new CustomEvent('childrenattached', {bubbles: true, composed: true});
        console.log('dispatchingEvent!!');
        this.dispatchEvent(event);

    }

}

window.customElements.define('whcg-lit-text-field', WhcgLitTextField);

export { WhcgLitTextField };




//HEJ
